-- Using the INGREDIENT and MEAL tables, write a query to return the name of all meals that contain garlic.

SELECT T1.NAME
FROM MEAL AS T1
JOIN INGREDIENT AS T2 ON T1.MEAL_ID = T2.MEAL_ID
WHERE T2.NAME = 'Garlic';


-- Using the INGREDIENT and MEAL tables, write a query to return the number of meals with vegetarian ingredients.

SELECT COUNT(*) AS VEGETARIAN_MEALS
FROM MEAL AS T1
JOIN INGREDIENT AS T2 ON T1.MEAL_ID = T2.MEAL_ID
WHERE T2.VEGETARIAN;


-- Using the INGREDIENT and MEAL tables, write a query to return the names of meals that have at least 1 gluten free ingredient and at least 1 vegan ingredient.

SELECT T1.NAME 
FROM MEAL AS T1
JOIN INGREDIENT AS T2 ON T1.MEAL_ID = T2.MEAL_ID
WHERE T2.GLUTEN_FREE AND T2.VEGAN
GROUP BY T1.NAME;


-- Using the INGREDIENT and MEAL tables, write a query to return the average number of ingredients per meal.

SELECT AVG(NUM_INGR)
FROM (SELECT MEAL_ID, COUNT(*) AS NUM_INGR
FROM INGREDIENT 
GROUP BY MEAL_ID) AS AVG_INGR;


--Using the INGREDIENT and MEAL tables, write a query to return the names of meals that have more than 3 ingredients.

SELECT T1.NAME, COUNT(*) AS NUM_INGR
FROM INGREDIENT AS T2 
JOIN MEAL AS T1 ON T2.MEAL_ID = T1.MEAL_ID
GROUP BY T1.NAME
HAVING NUM_INGR > 3;


-- Using the following table definitions, write an inner join for the two tables

CREATE TABLE CUSTOMER (
    CUSTOMER_ID INT,
    NAME VARCHAR(255),
    ADDRESS VARCHAR(255)
);

CREATE TABLE ORDER (
    ORDER_ID INT,
    CUSTOMER_ID INT,
    ORDER_DATE DATE,
    TOTAL_COST DECIMAL(10,2)
);

SELECT T1.NAME, T1.ADDRESS, T2.ORDER_ID, T2.ORDER_DATE, T2.TOTAL_COST  
FROM CUSTOMER AS T1 INNER JOIN ORDER AS T2
ON T1.CUSTOMER_ID = T2.CUSTOMER_ID 
ORDER BY ORDER_ID;


-- Using the following table definitions, write an inner join for the two tables

CREATE TABLE PRODUCT (
    PRODUCT_ID INT,
    NAME VARCHAR(255),
    PRICE DECIMAL(10,2)
);

CREATE TABLE INVENTORY (
    PRODUCT_ID INT,
    STORE_ID INT,
    QUANTITY INT
);

SELECT FROM T1.NAME, T1.PRICE, T2.STORE_ID, T2.QUANTITY
FROM PRODUCT AS T1 INNER JOIN INVENTORY AS T2
ON T1.PRODUCT_ID = T2.PRODUCT_ID 
ORDER BY NAME;